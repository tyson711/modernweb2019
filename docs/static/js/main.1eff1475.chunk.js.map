{"version":3,"sources":["components/FormControl/index.js","components/FormGroup/FormGroup.jsx","components/FormGroup/index.js","components/HorizontalForm/withContextConsumer.jsx","components/HorizontalForm/HorizontalForm.jsx","components/HorizontalForm/index.js","components/Label/Label.jsx","components/Label/index.js","FinalFormTest.jsx","index.jsx"],"names":["FormGroup","styled","div","_templateObject","withContextConsumer","_ref","Context","context","BaseComponent","factory","React","createFactory","_React$Component","WithContextConsumer","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","Consumer","contextProps","objectSpread","props","Component","HorizontalFormContext","createContext","FormContainer","HorizontalForm_templateObject","FormRow","_templateObject2","FormCol","_ref2","spacing","others","objectWithoutProperties","_templateObject3","Array","isArray","HorizontalForm","children","_spacing","split","reduce","acc","val","concat","trim","toConsumableArray","_spacing2","slicedToArray","s1","s2","undefined","map","s","Number","normalizeSpacingProperty","Provider","required","css","Label_templateObject","Label","label","Label_templateObject2","FinalFormTest","_ref$fieldCount","fieldCount","onSubmit","refCount","useRef","keys","n","react_grid_system_lib","fluid","style","padding","react_final_form_es","subscription","submitting","render","handleSubmit","form","values","paddingRight","components_FormGroup","current","lib","btnStyle","onClick","reset","_ref3","Preview","JSON","stringify","maxHeight","overflowY","components_HorizontalForm","_ref4","width","index","isRequiredField","validate","placeholder","name","_ref5","input","meta","whiteSpace","components_Label","react_form_control_lib","assign","type","error","touched","FieldError","FinalFormTest_templateObject","pre","FinalFormTest_templateObject2","window","alert","ReactDOM","src_FinalFormTest","document","getElementById"],"mappings":"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","file":"static/js/main.1eff1475.chunk.js","sourcesContent":["import '@trendmicro/react-form-control/dist/react-form-control.css';\nimport FormControl, { Input, Select, Textarea } from '@trendmicro/react-form-control';\n\nexport { Input, Select, Textarea };\nexport default FormControl;\n","import styled from 'styled-components';\n\nconst FormGroup = styled.div`\n    margin-bottom: 1rem;\n`;\n\nexport default FormGroup;\n","import FormGroup from './FormGroup';\n\nexport default FormGroup;\n","import React from 'react';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\n\nconst withContextConsumer = ({ context: Context }) => BaseComponent => {\n    const factory = React.createFactory(BaseComponent);\n\n    class WithContextConsumer extends React.Component {\n        render() {\n            return (\n                <Context.Consumer>\n                    {(contextProps) => factory({\n                        ...contextProps,\n                        ...this.props\n                    })}\n                </Context.Consumer>\n            );\n        }\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n        return setDisplayName(wrapDisplayName(BaseComponent, 'withContextConsumer'))(WithContextConsumer);\n    }\n\n    return WithContextConsumer;\n};\n\nexport default withContextConsumer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport withContextConsumer from './withContextConsumer';\n\nconst HorizontalFormContext = React.createContext();\n\nconst normalizeSpacingProperty = spacing => {\n    if (typeof spacing === 'string') {\n        spacing = spacing.split(' ').reduce((acc, val) => {\n            if (val) {\n                acc = acc.concat(val.trim());\n            }\n            return acc;\n        }, []);\n    } else {\n        spacing = [...spacing];\n    }\n\n    let [s1, s2] = spacing;\n    s1 = s1 || 0;\n    s2 = (s2 !== undefined && s2 !== null) ? (s2 || 0) : s1;\n\n    // number to px\n    spacing = [s1, s2].map(s => (Number(s) > 0 ? `${s}px` : s));\n\n    return spacing;\n};\n\n/**\n * The spacing property may be specified as either one or two values:\n * ```\n * spacing: <length> <length>? | [<length>, <length>?]\n * ```\n *\n * When one `<length>` value is specified, it defines both the horizontal and vertical spacings between cells.\n * When two `<length>` values are specified, the first value defines the horizontal spacing between cells (i.e., the space between cells in adjacent columns), and the second value defines the vertical spacing between cells (i.e., the space between cells in adjacent rows).\n */\nconst HorizontalForm = ({ spacing, children }) => {\n    // The normalizeSpacingProperty() function will return an array containing both the horizontal and vertical spacing.\n    spacing = normalizeSpacingProperty(spacing);\n\n    return (\n        <HorizontalFormContext.Provider value={{ spacing }}>\n            {(typeof children === 'function')\n                ? children({ FormContainer, FormRow, FormCol })\n                : children\n            }\n        </HorizontalFormContext.Provider>\n    );\n};\n\nconst FormContainer = styled.div`\n    display: table;\n`;\n\nconst FormRow = styled.div`\n    display: table-row;\n`;\n\nconst FormCol = withContextConsumer({\n    context: HorizontalFormContext,\n})(styled(\n    /* Avoid passing unknown props to the underlying element. */\n    ({ spacing, ...others }) => <div {...others} />\n)`\n    display: table-cell;\n    padding-bottom: ${props => (Array.isArray(props.spacing) ? props.spacing[1] : 0)};\n\n    // No padding for the last row.\n    ${FormRow}:last-child > & {\n        padding-bottom: 0;\n    }\n\n    & + & {\n        padding-left: ${props => (Array.isArray(props.spacing) ? props.spacing[0] : 0)};\n    }\n`);\n\nexport { FormContainer, FormRow, FormCol };\nexport default HorizontalForm;\n","import HorizontalForm, { FormContainer, FormRow, FormCol } from './HorizontalForm';\n\nexport { FormContainer, FormRow, FormCol };\nexport default HorizontalForm;\n","import styled, { css } from 'styled-components';\n\nconst required = css`\n    &::after {\n        content: '*';\n        color: #db3d44;\n    }\n`;\n\nconst Label = styled.label`\n    display: inline-block;\n    margin-bottom: .5rem;\n\n    ${props => props.required && required}\n`;\n\nexport default Label;\n","import Label from './Label';\n\nexport default Label;\n","import styled from 'styled-components';\nimport React from 'react';\nimport { Form, Field, FormSpy } from 'react-final-form';\nimport { Button } from './components/Buttons';\nimport { Input } from './components/FormControl';\nimport FormGroup from './components/FormGroup';\nimport { Container, Row, Col } from './components/GridSystem';\nimport HorizontalForm from './components/HorizontalForm';\nimport Label from './components/Label';\n\nconst required = value => (value ? undefined : 'Required field.')\n\nconst FinalFormTest = ({ fieldCount = 0, onSubmit }) => {\n    const refCount = React.useRef(0);\n    const keys = [...Array(fieldCount).keys()]\n        .map(n => n + 1);\n\n    return (\n        <Container fluid style={{ padding: '1rem 1.5rem' }}>\n            <Form\n                onSubmit={onSubmit}\n                subscription={{\n                    submitting: true\n                }}\n                render={({ handleSubmit, form, values }) => {\n                    return (\n                        <Row>\n                            <Col style={{ paddingRight: '1rem' }}>\n                                <h2>React Final Form Performance Optimization</h2>\n                                <p>Click <strong>Reset</strong> and input something for the first 10 text fields (marked as required). Your goal is to minimze the form render count without exceeding 2 renders for a successful form submission. So each time you make change to a text field, it will not rerender the whole form on every change.</p>\n                                <FormGroup>\n                                    <strong>Form fields:</strong> {fieldCount}\n                                </FormGroup>\n                                <FormGroup>\n                                    <strong>Form render count:</strong> {++refCount.current}\n                                </FormGroup>\n                                <FormGroup>\n                                    <Button\n                                        btnStyle=\"primary\"\n                                        onClick={handleSubmit}\n                                    >\n                                        Submit\n                                    </Button>\n                                    <Button\n                                        btnStyle=\"default\"\n                                        onClick={() => {\n                                            form.reset();\n                                            refCount.current = 0;\n                                        }}\n                                    >\n                                        Reset\n                                    </Button>\n                                </FormGroup>\n                                <FormSpy subscription={{ values: true }}>\n                                    {({ values }) => (\n                                        <Preview>{JSON.stringify(values, 0, 2)}</Preview>\n                                    )}\n                                </FormSpy>\n                            </Col>\n                            <Col style={{ maxHeight: 'calc(100vh - 2rem)', overflowY: 'auto' }}>\n                                <HorizontalForm spacing={['.75rem', '.5rem']}>\n                                    {({ FormContainer, FormRow, FormCol }) => (\n                                        <FormContainer style={{ width: '100%' }}>\n                                            {keys.map((key, index) => {\n                                                const isRequiredField = (index < 10);\n                                                const validate = isRequiredField ? required : null;\n                                                const placeholder = isRequiredField ? 'Required field' : 'Optional field';\n                                                \n                                                return (\n                                                    <Field\n                                                        name={`field${key}`}\n                                                        key={key}\n                                                        validate={validate}\n                                                    >\n                                                        {({ input, meta }) => (\n                                                            <FormRow>\n                                                                <FormCol style={{ width: '1%', whiteSpace: 'nowrap' }}>\n                                                                    <Label required={isRequiredField}>\n                                                                        Field {key}\n                                                                    </Label>\n                                                                </FormCol>\n                                                                <FormCol>\n                                                                    <Input {...input} type=\"text\" placeholder={placeholder} />\n                                                                    {meta.error && meta.touched && <FieldError>{meta.error}</FieldError>}\n                                                                </FormCol>\n                                                            </FormRow>\n                                                        )}\n                                                    </Field>\n                                                );\n                                            })}\n                                        </FormContainer>\n                                    )}\n                                </HorizontalForm>\n                            </Col>\n                        </Row>\n                    );\n                }}\n            />\n        </Container>\n    );\n};\n\nexport default FinalFormTest;\n\nconst FieldError = styled.div`\n    color: #db3d44;\n`;\n\nconst Preview = styled.pre`\n    background-color: #f7f8f9;\n    padding: .75rem 1rem;\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FinalFormTest from './FinalFormTest';\n\nconst handleSubmit = values => {\n    window.alert(JSON.stringify(values, 0, 2));\n};\n\nconst App = () => {\n    return (\n        <FinalFormTest\n            fieldCount={1000}\n            onSubmit={handleSubmit}\n        />\n    );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}